#Skills/Plugins
Pre-installed skills are present in skills directory while skills which are created by yourself will be saved in custom directory. Ausis has ability to search and load plugins from both of the directories.

from plugin import plugin

@plugin("hello world")
def hello_world(ausis, s):
    ausis.say("Hello World!")

or it can be used as a callable class:

from plugin import plugin

@plugin("hello world")
class hello_world:
    """Prints \"hello world!\""""
    def __call__(self, ausis, s):
        ausis.say("Hello World!")

#Init
If a class Plugins has a function init(self, ausis) this method will be avoked at the initialization state of the execution.

from plugin import plugin

@plugin
class HelloWorld:

    def init(self, ausis):
        ausis.say("INIT HelloWorld!!!")

    def require(self):
        pass

    def complete(self):
        pass

    def alias(self):
        pass

    def run(self, ausis, s):
        ausis.say("Hello world!")

#Features
@alias, @require and @complete are the decorators by which plugins can be modified. These decorators can be used in any order or several times. @plugin must be declared because it is the name of the command by which action of that command would be called.

#Alias

from plugin import plugin, alias

@alias("hello", "cmd")
@plugin("helloCmd")
def helloWorld(ausis, s):
   pass
hello and cmd are the alias of the plugin helloCmd. An alias is just like copy and pasting the whole plugin with the new name.

#Require
@require decorator has all compatiability constraints to check which plugins are compatiable with the system. Those plugins which are not compatable with that system will not be displayed.

#Requirements
> Network connection
> Python(plugin.python2, plugin.python3)
> Platform (plugin.Linux, plugin.MACOS, plugin.Windows)
> Native (string)

Example
from plugin import plugin, require, PYTHON3, LINUX, WINDOWS


@require(platform=[LINUX, WINDOWS], python=python3, network=True, native=["firefox", "curl"])
@plugin("helloCmd")
def helloWorld(ausis, s):
    pass

In case of plugin incompatible because of missing native binary ($PATH) a notification will be saved in status of the plugins and will not be counted in loaded plugins during execution.

#Auto Complete Command
Ausis has the feature of auto completion (@complete) of the commands by using TAB button from the keyboard when ausis in text mode.

from plugin import plugin, complete

@complete("complete0", "complete1")
@plugin
def helloWorld(ausis, s):
    pass

#Multi Word Commands
It's better to create two separate plugins for multi word commands that works with @alias decorator e.g. check ram, check weather.

@plugin("check weather")
check_weather(ausis, s):
    pass

@alias("info ram")
@plugin("check ram")
check_ram(ausis s):
    pass